# -*- coding: utf-8 -*-
"""TareMatematicaDiscreta_DenilsonMoralesMallqui.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uNUizPTgLyFzPkyZ53NyghesE__GiLzo

Lógica Matemática:Tabla de verdad
Estudiante:Denilson Teofilo Morales Mallqui
"""

#Tarea
import itertools#Permite crear combinaciones,permutaciones
import re#Uso de expresiones regulares,comparacion de cadenas,realizacion de busquedas y manipulaciones de texto
from itertools import product#Producto cartesiano de dos o mas iterables, para generar todas las combinaciones posibles
from tabulate import tabulate#Facilita la creacion de las tablas usando listas,diccionarios u otros iterables
from collections import OrderedDict#Mantiene el orden en que se agregaron los elementos A

symbols = {'∧', '∨', '→', '↔'} # Símbolos para facilitar la copia en la declaración lógica

statement = '~(A ∧ B) ↔ (~A ∨ ~B)'

#Condicional
def ifthen(P:bool , Q:bool) -> bool:#Toma dos argumentos booleanos y retorna un valor booleano
  return not(P and not Q)

#Bicondicional
def bicondicional(P:bool , Q:bool)->bool:#Toma dos argumentos booleanos y retorna un valor booleano
  return not(P and not Q)and not(Q and not P)

"""Enunciado: Se sabe que unicamente P es verdadero,¿Qué puede afirmarse del valor de verdad de cada una las proposiciones siguientes?"""

#Ejercicio1
print('---------Ejercicio 1--------')
print('*****')
print('p ∧ q:')
for P,Q in product((True,False),repeat=2):
  if P==True:
     print(f'{str(P):<5} and {str(Q):<5} is {P and Q}')
print("\n**************")
print("Dado que P solo toma valores verdaderos , afirmamos que el valor de esta proposicion\n"
"dependerá netamente de los valores de Q , este tomará dos valores los cuales son(Verdadero, Falso)")

#Ejercicio2
print('---------Ejercicio 2--------')
print('*****')
print('R ∨ P:')
for R,P in product((True,False),repeat=2):
  if P==True:
     print(f'{str(R):<5} or {str(P):<5} is {R or P}')
print("\n**************")
print("Dado que P solo toma valores verdaderos , afirmamos que el valor de esta proposicion\n"
"será verdadera, ya que para que sea falsa ambos valores tienen que ser falsos")

#Ejercicio3
print('---------Ejercicio 3--------')
print('*****')
print('R ∧ P:')
for R,P in product((True,False),repeat=2):
  if P==True:
     print(f'{str(R):<5} and {str(P):<5} is {R and P}')
print("\n**************")
print("Dado que P solo toma valores verdaderos , afirmamos que el valor de esta proposicion\n"
"dependerá de R, es decir, tomará valores(verdadero,falso)")

#Ejercicio4
print('---------Ejercicio 4--------')
print('*****')
print('S ∨ -P:')
for S,P in product((True,False),repeat=2):
  if P==True:
     print(f'{str(S):<5} or {str(not P):<5} is {S or not P}')
print("\n**************")
print("Sabemos que P solo toma valores verdaderos ,en este caso esos valores son invertidos por la negacion \npor lo cual afirmamos que el valor de esta proposicion\n"
"dependerá de los valores que toma S, es decir, tomará valores (verdadero,falso)")

#Ejercicio5
print('---------Ejercicio 5--------')
print('*****')
print('R → P:')
for R,P in product((True,False),repeat=2):
  if P==True:
     print(f'{str(R):<5} → {str(P):<5} is {ifthen(R,P)}')
print("\n**************")
print("Sabemos que P solo toma valores verdaderos ,en este caso esos valores son invertidos por la negacion \npor lo cual afirmamos que el valor de esta proposicion\n"
"será verdadera")

#Ejercicio6
print('---------Ejercicio 6--------')
print('*****')
print('P → Q:')
for P,Q in product((True,False),repeat=2):
  if P==True:
     print(f'{str(P):<5} → {str(Q):<5} is {ifthen(P,Q)}')
print("\n**************")
print("Sabemos que P solo toma valores verdaderos ,en este caso esos valores son invertidos por la negacion \npor lo cual afirmamos que el valor de esta proposicion\n"
"depende de los valores de Q, es decir,la proposicion tomara valores(verdero,falso)")

#Ejercicio7
print('---------Ejercicio 7--------')
print('*****')
print('P → P ∨ S:')
for P,S in product((True,False),repeat=2):
  if P==True:
     print(f'{str(P):<5} → {str(P):<5} or {str(S):<5} is {ifthen(P,P or S)}')
print("\n**************")
print("Sabemos que P solo toma valores verdaderos ,\n entonces P ∨ S obtendran valores verdaderos"
" por ende la proposicion final es una condicional y esta también sera verdadera")

#Ejercicio8
print('---------Ejercicio 8--------')
print('*****')
print('-P → Q ∧ R:')
for P,Q,R in product((True,False),repeat=3):
  if P==True:
     print(f'{str(not P):<5} → ({str(Q):<5} and {str(R):<5}) is {ifthen(not P,Q and R)}')
print("\n**************")
print("Sabemos que P solo toma valores verdaderos ,\n la negación invierte esos valores"
" por ende la proposicion será verdera, ya que la condicional es falsa si el antecendete es un verdadero y el consecuente es falso")

#Ejercicio9
print('---------Ejercicio 9--------')
print('*****')
print('S → -P')
for S,P in product((True,False),repeat=2):
  if P==True:
     print(f'{str(S):<5} → {str(not P):<5} is {ifthen(S,not P)}')
print("\n**************")
print("Sabemos que P solo toma valores verdaderos ,\nla negación invierte esos valores"
" por ende la proposición tomará valores(verdadero,falso)")

#Ejercicio10
print('---------Ejercicio 10--------')
print('*****')
print('R → (S → P)')
for R,S,P in product((True,False),repeat=3):
  if P==True:
     print(f'{str(R):<5} → ({str(S):<5} → {str(P):<5}) is {ifthen( R,ifthen(S,P))}')
print("\n**************")
print("Sabemos que P solo toma valores verdaderos ,\n por lo tanto la proposicion sera verdadera ")

#Ejercicio11
print('---------Ejercicio 11--------')
print('*****')
print('(P ∨ S) → (Q ∧ -P))')
for P,S,Q in product((True,False),repeat=3):
  if P==True: #La condicion de que P solo tomará valores positivos
     print(f'({str(P):<5} or {str(S):<5}) → ({str(Q):<5} and {str(not P):<5}) is {ifthen(P or S, Q and not P)}')
print("\n**************")
print("Sabemos que P solo toma valores verdaderos ,\nla negacion invierte estos valores"
,"por lo tanto la proposicion será falsa")

#Ejercicio12
print('---------Ejercicio 12--------')
print('*****')
print('Q ∧ -P → R ∧ Q')
for Q,P,R in product((True,False),repeat=3):
  if P==True:
     print(f'({str(Q):<5} and {str(not P):<5}) → ({str(R):<5} and {str(Q):<5}) is {ifthen(Q and not P, R and Q)}')
print("\n**************")
print("Sabemos que P solo toma valores verdaderos ,\nestos valores serán invertidos por la negación "
 "por lo tanto la proposicion tomará valores verdaderos, debido a que los antecedentes de la condicional toma valores falsos")

"""Enunciado:Determinar cuáles de las siguientes proposiciones son tautologías
Tautologia:Si los valores de su tabla de verdad todos son **verdaderos**
"""

#Ejercicio1
print('---------Ejercicio 1--------')
print('*****')
print('P ∧ Q → P ∧ R \n')
print('*****************')
print('Tabla de verdad :')
print('*****************')
for P,Q,R in product((True,False),repeat=3):
  print(f'({str(P):<5} and {str(Q):<5}) → ({str(P):<5} and {str(R):<5}) is {ifthen(P and Q, P and R)}')

#Ejercicio2
print('---------Ejercicio 2--------')
print('*****')
print('P → P ∧ Q \n')
print('*****************')
print('Tabla de verdad :')
print('*****************')
for P,Q in product((True,False),repeat=2):
  print(f'{str(P):<5} → ({str(P):<5} and {str(Q):<5}) is {ifthen(P,P and Q)}')

#Ejercicio3
print('---------Ejercicio 2--------')
print('*****')
print('P ∧ -(Q ∨ P) \n')
print('*****************')
print('Tabla de verdad :')
print('*****************')
for P,Q in product((True,False), repeat=2):
  print(f'{str(P):<5} and not({str(Q):<5} or {str(P):<5}) is {P and not(Q or P)}')

#Ejercicio4
print('---------Ejercicio 4--------')
print('*****')
print('(P → (Q ∨ -P)) → -Q \n')
print('*****************')
print('Tabla de verdad :')
print('*****************')
for P,Q in product((True,False),repeat=2):
  print(f'({str(P):<5} → ({str(Q):<5} or {str(not P):<5})) → {str(not Q):<5} is {ifthen(ifthen(P,Q or not P), not Q)}')

#Ejercicio5
print('---------Ejercicio 5--------')
print('*****')
print('(P → Q) → (-Q → P)')
print('*****************')
print('Tabla de verdad :')
print('*****************')
for P,Q in product((True,False),repeat=2):
  print(f'({str(P):<5} → {str(Q):<5}) → ({str(not Q):<5} → {str(P):<5}) is {ifthen(ifthen(P,Q),ifthen(not Q,P))}')

#Ejercicio6
print('---------Ejercicio 6--------')
print('*****')
print('(P ↔ Q) ∧ (P ∧ -Q)')
print('*****************')
print('Tabla de verdad :')
print('*****************')
for P,Q in product ((True,False),repeat=2):
  print(f'({str(P):<5} ↔ {str(Q):<5})and ({str(P):<5} and {str(not Q)}) is {bicondicional(P,Q) and (P and not Q)} ')

#Ejercicio7
print('---------Ejercicio 7--------')
print('*****')
print('(P ∧ -((P ∨ Q) ∨ R)')
print('*****************')
print('Tabla de verdad :')
print('*****************')
for P,Q,R in product ((True,False), repeat=3):
  print(f'{str(P):<5} and not({str(P):<5} or {str(Q):<5}) or {str(R):<5} is {P and not((P or Q) or R)}')

#Ejercicio8
print('---------Ejercicio 8--------')
print('*****')
print('(P ∨ (-P ∨ R)) ')
print('*****************')
print('Tabla de verdad :')
print('*****************')
for P,R in product ((True,False),repeat=2):
  print(f'({str(P):<5} or ({str(not P):<5} or {str(R):<5})) is {P or (not P or R)}')

print('Esta proposicion si es una tautologia, ya que todo sus valores son verdaderos.')

"""Adicionales(Ejercicio de la clase)

"""

#Dada la siguiente forma proposicional. Construya la Tabla de verdad de una forma
#proposicional.
print('A:[(P ∧ Q)→(R ∨ -P)] ∧ R')
for P,Q,R in product ((True,False),repeat=3):
  print(f'[({str(P):<5} and {str(Q):<5}) → ({str(R):<5} or {str(not P):<5})] and {str(R):<5} is {ifthen(P and Q, R or not P) and R}')

#Dada la siguiente forma proposicional. Construya la Tabla de verdad de una forma
#proposicional
print('B:[-P → (Q ∧ P)] ↔ -Q')
for P,Q  in product ((True,False),repeat = 2):
  print(f'[{str(not P):<5} → ({str(Q):<5} ∧ {str(P):<5})] ↔ {str(not Q):<5} is {bicondicional(ifthen(not P,Q and P),not Q)}')

#Dada la siguiente forma proposicional. Construya la Tabla de verdad de una forma
#proposicional
print('C:[-P ∧ (Q ∨ R)] → [(P ∨ R) ∧ Q]')
for P,Q,R in product((True,False),repeat = 3):
  print(f'[{str(not P):<5} and ({str(Q):<5}or {str(R):<5})] → [({str(P):<5} or {str(R):<5}) and {str(Q):<5}] is {ifthen(not P and (Q or R),(P or R) and Q)}')